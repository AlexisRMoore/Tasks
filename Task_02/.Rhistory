library(swirl)
library(swirl)
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args()
args(list.files())
args(list.files)
old.dir <- list.files
old.dir <- getwd()
dir.create(testdir)
dir.create()
dir.create("testdir")
setwd(testdir)
setwd("tesstdir")
setwd("testdir")
file.create("mytest.R")
dir()
files.exist("mytest.R")
file.exist("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R"to"mytest2.R")
file.rename("mytest.R") to "mytest2.R"
file.rename("mytest.R")
file.rename("mytest.R"to"mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create(file.path("testdir2", "testdir3")
dir.create(file.path("testdir2", "testdir3")
recursive = TRUE
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5)
mean(c(2, 4, 5))
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num =5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "world", ",", "how", "are", "you", "?"))
submit()
submit()
mad_libs(place = "London", adjective = "beautiful", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(car)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
beren.csv
file.info(beren.csv)
setwd(Task_02)
setwd('C:\\Desktop\\Evolution\\Tasks\\Task_02')
setwd('/OneDrive/Evolution/Tasks/Task_02')
setwd('C\\OneDrive\\Desktop\\Evolution\\Tasks\\Task_02')
Data1 <- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
Data2 <- read.csv('http://jonsmitchell.com/data/cyrus.csv', stringsAsFactors=F)
write.csv(Data1, 'rawdata.csv', quote=F)
head(Data1)
GlargleBrgle <-D Data1
GlargleBrgle <- Data1
head(GlargleBrgle)
length(Data1)
nrow(Data1)
ncol(Data1)
colnames(Data1)
head(Data1)
Data1[1 ,]
Data1[2 ,]
Data1[1:3 ,]
Data1[1:3 , 4]
Data1[1:5 , 1:3]
Feeds <- which(Data1 [,9] = 'bottle ')
Feeds <- which(Data1 [,9] == 'bottle ')
berenMilk <- Data1[Feeds ,]
head(berenMilk)
Feeds <- which(Data1[, 'event'] == 'bottle')
Feeds <- which(Data1$event == 'bottle'
head(Feeds)
head(Feeds)
Feeds <- which(Data1$event == 'bottle')
head(Feeds)
dayID <- apply(Data1, 1, function(x) paste(x[1:3], collapse='-'))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data1$age <- dateID - dateID[which(Data1$event == 'birth')]
head(Data1)
beren2 <- Data1
beren3 <- beren2[order(beren2$age) ,]
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
dir()
setwd("Task_02")
setwd("/Users/moore/Desktop/Evolution/Tasks/Task_02")
setwd("C:/Users/alexi/OneDrive/Desktop/Evolution/Tasks/Task_02")
Data1[1 ,]
Data1 <- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
head(Data1)
head(Data1)
Data1[1 ,]
Data1[2 ,]
Data1[1:3 ,]
Data1[1:3 , 4]
Data1[1:5 , 1:3]
Data1[257 , 1:3]
Feeds <- which(Data1 [,9] == 'bottle')
berenMilk <- Data1[Feeds ,]
head(berenMilk)
head(Feeds)
Feeds <- which(Data1[, 'event'] == 'bottle')
head(Feeds)
Feeds <- which(Data1$event == 'bottle')
head(Feeds)
Data2 <- read.csv('http://jonsmitchell.com/data/cyrus.csv', stringsAsFactors=F)
write.csv(Data2, 'rawdata2.csv', quote=F)
length(1)
length(Data)
Feeds <- which(beren3$event == "bottle")
dayID <- apply(Data1, 1, function(x) paste(x[1:3], collapse='-'))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data1$age <- dateID - dateID[which(Data1$event == 'birth')]
beren2 <- Data1
beren3 <- beren2[order(beren2$age) ,]
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
head(avgFeed)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
numFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], lenghth)
length(Data1)
numFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], lenghth)
numFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)" )
?par
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type = "b", pch = 16, xlab = "age in days", ylab = "ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
as.numeric(names(totalFeed))
plot(as.numeric(names(avgFeed)), avgFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(avgFeed), lty=2, col='red')
pdf(''r02b-totalMilkByDay.pdf'', height = 4, width = 4)
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(avgFeed)), avgFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(avgFeed), lty=2, col='red')
dev.off()
totalFeed <- beren3$value[Feeds]
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
source("http://jonsmitchell.com/code/plotFxn02b.R")
